// send.js ‚Äî —Ñ—Ä–æ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ P2P, –±–µ–∑ relay/—á–∞–Ω–∫–æ–≤)
const SOCKET_URL = 'https://twindrop.onrender.com';
const API_URL = SOCKET_URL + '/api'; // REST API
const socket = io(SOCKET_URL);

(function () {
    const codeInput = $('#codeInput');
    const joinBtn = $('#joinBtn');
    const sendUI = $('#sendUI');
    const fileInput = $('#file');
    const sendBtn = $('#sendBtn');
    const statusEl = $('#status');

    const q = parseQuery();
    if (q.room) {
        codeInput.value = q.room;
        setTimeout(async () => {
            await checkRoom();
            if (roomExists) join();
        }, 0);
    }

    let peer;
    let code;
    let roomExists = false;

    // üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–Ω–∞—Ç—ã
    async function checkRoom() {
        const val = (codeInput.value || '').replace(/\D/g, '').padStart(6, '0');
        if (val.length !== 6) {
            setStatus(statusEl, '–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.');
            roomExists = false;
            joinBtn.disabled = true;
            return;
        }

        try {
            const res = await fetch(`${API_URL}/check-room/${val}`);
            const data = await res.json();

            if (data.exists) {
                setStatus(statusEl, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞');
                roomExists = true;
                joinBtn.disabled = false;
            } else {
                setStatus(statusEl, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                roomExists = false;
                joinBtn.disabled = true;
            }
        } catch (err) {
            setStatus(statusEl, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–Ω–∞—Ç—ã.');
            // console.error(err);
            joinBtn.disabled = true;
            roomExists = false;
        }
    }

    codeInput.addEventListener('input', checkRoom);

    function join() {
        if (peer || socket.data?.joined) {
            setStatus(statusEl, '–í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.');
            return;
        }

        code = (codeInput.value || '').replace(/\D/g, '').padStart(6, '0');
        if (!roomExists) {
            setStatus(statusEl, '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥.');
            return;
        }

        setStatus(statusEl, '–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ‚Ä¶');
        socket.emit('join-room', { code });
        socket.data = { joined: true };
        joinBtn.disabled = true;
        joinBtn.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
    }

    joinBtn.onclick = join;
    codeInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') join(); });

    // –°–æ–±—ã—Ç–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    socket.on('peer-joined', () => { /* –∏–≥–Ω–æ—Ä */ });

    socket.on('room-size', ({ size }) => {
        if (!code) return;
        if (size === 1) {
            setStatus(statusEl, '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è‚Ä¶');
        } else if (size === 2 && !peer) {
            setStatus(statusEl, '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º P2P‚Ä¶');

            peer = createPeer({
                initiator: true,
                iceServers: [
                    { urls: 'stun:stun.l.google.com:19302' },
                    { urls: 'stun:stun1.l.google.com:19302' }
                ],
                onSignal: (data) => socket.emit('signal', { code, data }),
                onConnect: () => {
                    setStatus(statusEl, 'P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª.');
                    sendBtn.disabled = !fileInput.files?.length;
                },
                onData: () => { },
                onClose: () => {
                    setStatus(statusEl, 'P2P –∫–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç.');
                },
                onError: (e) => setStatus(statusEl, '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + e?.message)
            });

            sendUI.style.display = 'block';
        }
    });

    socket.on('signal', (data) => { if (peer) peer.handleSignal(data); });

    socket.on('room-full', () => setStatus(statusEl, '–ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –¥–≤—É–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.'));
    socket.on('peer-left', () => {
        setStatus(statusEl, '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ.');
        resetPeer();
        socket.data.joined = false;
        joinBtn.disabled = false;
        joinBtn.textContent = '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è';
        sendUI.style.display = 'none';
    });

    // –§–∞–π–ª
    fileInput.addEventListener('change', () => {
        sendBtn.disabled = !(fileInput.files && fileInput.files.length);
    });

    // –í–ï–†–°–ò–Ø –° –ß–ê–ù–ö–ê–ú–ò –ò BACKPRESSURE
    sendBtn.onclick = async () => {
        if (!peer || !peer.channel() || peer.channel().readyState !== 'open') {
            setStatus(statusEl, '–ö–∞–Ω–∞–ª –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤.');
            return;
        }

        const files = fileInput.files;
        if (!files || files.length === 0) return;

        const dc = peer.channel();

        // –ü–æ—Ä–æ–≥, –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–¥—ë–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞
        // 1 –ú–ë ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤
        dc.bufferedAmountLowThreshold = 1 * 1024 * 1024;

        // —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: 64 –ö–ë (–¥–ª—è Safari –∏–Ω–æ–≥–¥–∞ –ª—É—á—à–µ 16 –ö–ë)
        const CHUNK_SIZE = navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome')
            ? 16 * 1024
            : 64 * 1024;

        const waitForDrain = () => new Promise((resolve) => {
            if (dc.bufferedAmount <= dc.bufferedAmountLowThreshold) return resolve();
            const onLow = () => {
                dc.removeEventListener('bufferedamountlow', onLow);
                resolve();
            };
            dc.addEventListener('bufferedamountlow', onLow);
        });

        try {
            for (const file of files) {
                // –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                dc.send(JSON.stringify({ __meta: 'file', name: file.name, size: file.size }));
                setStatus(statusEl, `–û—Ç–ø—Ä–∞–≤–∫–∞: ${file.name}`);
                let sent = 0;

                // —á–∏—Ç–∞–µ–º Blob –ø–æ –∫—É—Å–∫–∞–º
                for (let offset = 0; offset < file.size; offset += CHUNK_SIZE) {
                    const slice = file.slice(offset, offset + CHUNK_SIZE);
                    const buf = await slice.arrayBuffer();

                    // –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω ‚Äî –∂–¥—ë–º
                    if (dc.bufferedAmount > dc.bufferedAmountLowThreshold) {
                        await waitForDrain();
                    }

                    dc.send(buf);
                    sent += buf.byteLength;

                    // –ø—Ä–æ–≥—Ä–µ—Å—Å (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ)
                    const ratio = Math.min(1, sent / file.size);
                    const sendBar = document.getElementById('sendBar');
                    const sendText = document.getElementById('sendText');
                    if (sendBar) sendBar.style.width = (ratio * 100).toFixed(2) + '%';
                    if (sendText) sendText.textContent = `${(sent / 1024 / 1024).toFixed(2)} / ${(file.size / 1024 / 1024).toFixed(2)} MB`;
                }

                // –º–∞—Ä–∫–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                dc.send(JSON.stringify({ __meta: 'file-complete', name: file.name, size: file.size }));
                setStatus(statusEl, `–§–∞–π–ª ${file.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
            }
        } catch (e) {
            console.error('Send error:', e);
            setStatus(statusEl, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + (e?.message || e));
        }
    };

    function resetPeer() {
        if (peer) {
            try { peer.destroy(); } catch { }
            peer = null;
        }
    }

})();
