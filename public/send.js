// send.js ‚Äî —Ñ—Ä–æ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
const SOCKET_URL = 'https://twindrop.onrender.com';
const API_URL = SOCKET_URL + '/api'; // REST API
const socket = io(SOCKET_URL);

(function () {
    const codeInput = $('#codeInput');
    const joinBtn = $('#joinBtn');
    const sendUI = $('#sendUI');
    const fileInput = $('#file');
    const sendBtn = $('#sendBtn');
    const sendBar = $('#sendBar');
    const sendText = $('#sendText');
    const statusEl = $('#status');
    const qrContainer = $('#qrContainer'); // —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è QR-–∫–æ–¥–∞

    const disconnectBtn = $('#disconnectBtn');
    disconnectBtn.style.display = 'none'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞

    const q = parseQuery();
    if (q.room) {
        codeInput.value = q.room;
        // –∂–¥—ë–º –ø–æ–∫–∞ input —Ä–µ–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∏ —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–Ω–∞—Ç—É
        setTimeout(async () => {
            await checkRoom(); // —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
            if (roomExists) join(); // –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        }, 0);
    }

    let peer;
    let code;
    let roomExists = false; // —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞

    // üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–Ω–∞—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    async function checkRoom() {
        const val = (codeInput.value || '').replace(/\D/g, '').padStart(6, '0');
        if (val.length !== 6) {
            setStatus(statusEl, '–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥.');
            roomExists = false;
            joinBtn.disabled = true;
            return;
        }

        try {
            const res = await fetch(`${API_URL}/check-room/${val}`);
            const data = await res.json();

            if (data.exists) {
                setStatus(statusEl, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞');
                roomExists = true;
                joinBtn.disabled = false;
            } else {
                setStatus(statusEl, '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                roomExists = false;
                joinBtn.disabled = true;
            }
        } catch (err) {
            setStatus(statusEl, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–Ω–∞—Ç—ã.');
            console.error(err);
            joinBtn.disabled = true;
            roomExists = false;
        }
    }

    // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ (—Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
    codeInput.addEventListener('input', checkRoom);

    function join() {
        // –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å peer –∏–ª–∏ –º—ã —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if (peer || socket.data?.joined) {
            setStatus(statusEl, '–í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.');
            return;
        }

        code = (codeInput.value || '').replace(/\D/g, '').padStart(6, '0');
        if (!roomExists) {
            setStatus(statusEl, '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥.');
            return;
        }

        setStatus(statusEl, '–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ‚Ä¶');
        socket.emit('join-room', { code });
        socket.data = { joined: true }; // —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥
        joinBtn.disabled = true;        // –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        joinBtn.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
    }


    joinBtn.onclick = join;
    codeInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') join(); });

    // –°–æ–±—ã—Ç–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    socket.on('peer-joined', () => { /* –ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç */ });

    socket.on('room-size', ({ size }) => {
        if (!code) return;
        if (size === 1) {
            setStatus(statusEl, '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è‚Ä¶');
        } else if (size === 2 && !peer) {
            setStatus(statusEl, '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–∞ –º–µ—Å—Ç–µ. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º P2P‚Ä¶');

            // —Å–æ–∑–¥–∞—ë–º P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            peer = createPeer({
                initiator: true,
                iceServers: [
                    { urls: 'stun:stun.l.google.com:19302' },
                    { urls: 'stun:stun1.l.google.com:19302' }
                ],
                onSignal: (data) => socket.emit('signal', { code, data }),
                onConnect: () => {
                    setStatus(statusEl, 'P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª.');
                    sendBtn.disabled = !fileInput.files?.length;
                    disconnectBtn.style.display = 'inline-block'; // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                },
                onData: () => { },
                onClose: () => setStatus(statusEl, '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.'),
                onError: (e) => setStatus(statusEl, '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + e?.message)
            });
            sendUI.style.display = 'block';
        }
    });

    socket.on('signal', (data) => { if (peer) peer.handleSignal(data); });
    socket.on('room-full', () => setStatus(statusEl, '–ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –¥–≤—É–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.'));

    socket.on('peer-left', () => {
        setStatus(statusEl, '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ.');

        // –∑–∞–∫—Ä—ã–≤–∞–µ–º peer –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        resetPeer();

        // –¥–∞—ë–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        socket.data.joined = false;
        joinBtn.disabled = false;
        joinBtn.textContent = '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è';
        sendUI.style.display = 'none'; // —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–º
    fileInput.addEventListener('change', () => {
        sendBtn.disabled = !(fileInput.files && fileInput.files.length);
    });

    sendBtn.onclick = async () => {
        if (!peer || !peer.channel() || peer.channel().readyState !== 'open') {
            setStatus(statusEl, '–ö–∞–Ω–∞–ª –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤.');
            return;
        }

        const files = fileInput.files;
        if (!files || files.length === 0) return;

        for (const file of files) {
            // –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ
            peer.channel().send(JSON.stringify({ __meta: 'file', name: file.name, size: file.size }));

            const reader = file.stream().getReader();
            let sent = 0;

            setBar(sendBar, 0);
            sendText.textContent = `–û—Ç–ø—Ä–∞–≤–∫–∞: ${file.name}`;

            while (true) {
                const { value, done } = await reader.read();
                if (done) break;
                await waitForBufferLow(peer.channel());

                const chunk = value.buffer.slice(value.byteOffset, value.byteOffset + value.byteLength);
                peer.channel().send(chunk);

                sent += value.byteLength;
                setBar(sendBar, sent / file.size);
                sendText.textContent = `${(sent / 1024 / 1024).toFixed(2)} / ${(file.size / 1024 / 1024).toFixed(2)} MB`;
            }

            // –ø–æ—Å–ª–µ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "—Ñ–∞–π–ª –∑–∞–∫–æ–Ω—á–µ–Ω"
            peer.channel().send(JSON.stringify({ __meta: 'file-complete', name: file.name, size: file.size }));

            setStatus(statusEl, `–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è: ${file.name}...`);

            // –∂–¥—ë–º ack –∏–ª–∏ error —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            await new Promise((resolve, reject) => {
                const dc = peer.channel();
                const handler = (event) => {
                    try {
                        const msg = JSON.parse(event.data);
                        if (msg.__meta === 'ack' && msg.name === file.name) {
                            clearTimeout(timer);
                            dc.removeEventListener('message', handler);
                            setStatus(statusEl, `–§–∞–π–ª ${file.name} —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úÖ`);
                            resolve();
                        } else if (msg.__meta === 'error' && msg.name === file.name) {
                            clearTimeout(timer);
                            dc.removeEventListener('message', handler);
                            setStatus(statusEl, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ñ–∞–π–ª–∞: ${msg.reason || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                            reject(new Error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏: ${msg.reason}`));
                        }
                    } catch { /* –Ω–µ JSON */ }
                };

                const timer = setTimeout(() => {
                    dc.removeEventListener('message', handler);
                    setStatus(statusEl, `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ (—Ç–∞–π–º–∞—É—Ç) ‚ùå`);
                    reject(new Error("ACK timeout"));
                }, 20000); // 10 —Å–µ–∫—É–Ω–¥

                dc.addEventListener('message', handler);
            });


        }

        setStatus(statusEl, '–í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.');
    };

    function waitForBufferLow(dc) {
        return new Promise((resolve) => {
            const threshold = 256 * 1024; // –≤–º–µ—Å—Ç–æ 1 –ú–ë
            if (dc.bufferedAmount < threshold) return resolve();
            const check = () => {
                if (dc.bufferedAmount < threshold) {
                    dc.removeEventListener('bufferedamountlow', check);
                    resolve();
                }
            };
            try { dc.bufferedAmountLowThreshold = threshold; } catch { }
            dc.addEventListener('bufferedamountlow', check);
            setTimeout(check, 50);
        });
    }

    function resetPeer() {
        if (peer) {
            try { peer.destroy(); } catch { }
            peer = null;
        }
    }

    // üîò –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    disconnectBtn.onclick = () => {
        resetPeer();
        socket.emit('leave-room', { code });
        setStatus(statusEl, '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');

        disconnectBtn.style.display = 'none';
        sendUI.style.display = 'none';

        socket.data.joined = false;
        joinBtn.disabled = false;
        joinBtn.textContent = '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è';
    };

})();
